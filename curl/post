<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ValueError: View function did not return a response // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140620421370600,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Om73FidcB5RsdsGxQXn6";
    </script>
  </head>
  <body>
    <div class="debugger">
<h1>builtins.ValueError</h1>
<div class="detail">
  <p class="errormsg">ValueError: View function did not return a response</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140620421372280">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py"</cite>,
      line <em class="line">1836</em>,
      in <code class="function">__call__</code></h4>
  <div class="source"><pre class="line before"><span class="ws">                                </span>'Flask.blueprints instead'), stacklevel=2)</pre>
<pre class="line before"><span class="ws">        </span>return self.blueprints</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Shortcut for :attr:`wsgi_app`.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return '&lt;%s %r&gt;' % (</pre>
<pre class="line after"><span class="ws">            </span>self.__class__.__name__,</pre>
<pre class="line after"><span class="ws">            </span>self.name,</pre></div>
</div>

<li><div class="frame" id="frame-140620421372224">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py"</cite>,
      line <em class="line">1820</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.make_response(self.handle_exception(e))</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>if self.should_ignore_error(error):</pre>
<pre class="line after"><span class="ws">                </span>error = None</pre>
<pre class="line after"><span class="ws">            </span>ctx.auto_pop(error)</pre></div>
</div>

<li><div class="frame" id="frame-140620421372168">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py"</cite>,
      line <em class="line">1403</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>if handler is None:</pre></div>
</div>

<li><div class="frame" id="frame-140620421372336">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/_compat.py"</cite>,
      line <em class="line">33</em>,
      in <code class="function">reraise</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>text_type = unicode</pre></div>
</div>

<li><div class="frame" id="frame-140620421371496">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py"</cite>,
      line <em class="line">1817</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>ctx.push()</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.make_response(self.handle_exception(e))</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140620421372728">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py"</cite>,
      line <em class="line">1478</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">        </span>request_finished.send(self, response=response)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def try_trigger_before_first_request_functions(self):</pre></div>
</div>

<li><div class="frame" id="frame-140620421372784">
  <h4>File <cite class="filename">"/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py"</cite>,
      line <em class="line">1566</em>,
      in <code class="function">make_response</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>status = headers = None</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(rv, tuple):</pre>
<pre class="line before"><span class="ws">            </span>rv, status, headers = rv + (None,) * (3 - len(rv))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise ValueError('View function did not return a response')</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if not isinstance(rv, self.response_class):</pre>
<pre class="line after"><span class="ws">            </span># When we create a response object directly, we let the constructor</pre>
<pre class="line after"><span class="ws">            </span># set the headers and status.  We do this because there can be</pre>
<pre class="line after"><span class="ws">            </span># some extra logic involved when creating these objects with</pre></div>
</div>
</ul>
  <blockquote>ValueError: View function did not return a response</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1836, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1820, in wsgi_app
    response = self.make_response(self.handle_exception(e))
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1403, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/_compat.py", line 33, in reraise
    raise value
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1478, in full_dispatch_request
    response = self.make_response(rv)
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1566, in make_response
    raise ValueError('View function did not return a response')
ValueError: View function did not return a response</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1836, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1820, in wsgi_app
    response = self.make_response(self.handle_exception(e))
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1403, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/_compat.py", line 33, in reraise
    raise value
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1478, in full_dispatch_request
    response = self.make_response(rv)
  File "/home/admin1/Загрузки/LO_REPORT/modules/flask/flask/app.py", line 1566, in make_response
    raise ValueError('View function did not return a response')
ValueError: View function did not return a response

-->
